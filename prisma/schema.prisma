// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum RoleUser {
  superadmin
  customer
}

enum ProductStock {
  ready
  preorder
}

enum StatusOrder {
  pending
  success
  failed
}

model User {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  email      String    @unique @db.VarChar(255)
  password   String    @db.VarChar(255)
  role       RoleUser  @default(customer)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  orders     Order[]
  sessions   Session[]
}

model Session {
  id        String   @id
  userId    Int
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Brand {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  logo       String    @db.VarChar(255)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  products   Product[]
}

model Category {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  products   Product[]
}

model Location {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  products   Product[]
}

model Product {
  id          Int            @id @default(autoincrement())
  brand_id    Int
  category_id Int
  location_id Int
  name        String         @db.VarChar(255)
  description String         @db.Text
  price       BigInt         @db.BigInt
  stock       ProductStock
  images      String[]
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  brand       Brand          @relation(fields: [brand_id], references: [id])
  category    Category       @relation(fields: [category_id], references: [id])
  location    Location       @relation(fields: [location_id], references: [id])
  orders      OrderProduct[]
}

model Order {
  id         Int            @id @default(autoincrement())
  code       String         @unique @db.Text
  user_id    Int
  total      BigInt         @db.BigInt
  status     StatusOrder
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt
  user       User           @relation(fields: [user_id], references: [id])
  detail     OrderDetail?
  products   OrderProduct[]
}

model OrderDetail {
  id         Int      @id @default(autoincrement())
  order_id   Int      @unique
  name       String   @db.VarChar(255)
  phone      String   @db.VarChar(255)
  address    String   @db.VarChar(255)
  city       String   @db.VarChar(255)
  postalCode String   @db.VarChar(255)
  notes      String?  @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  order      Order    @relation(fields: [order_id], references: [id])
}

model OrderProduct {
  id         Int      @id @default(autoincrement())
  product_id Int
  order_id   Int
  subtotal   BigInt   @db.BigInt
  quantity   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  product    Product  @relation(fields: [product_id], references: [id])
  order      Order    @relation(fields: [order_id], references: [id])
}
